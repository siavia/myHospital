/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
//待改进：病患管理，病患的增改删

package myhospital;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.event.ItemEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrator
 */
public class CureJFrame extends javax.swing.JFrame {

    /**
     * Creates new form CureJFrame
     */
    
    private String SelectQueryFieldStr = "编号";//////////////////////////////////////////////////////////////
    private static DBProcess db = null;
    private Vector mainVector = null;
    private Vector titleVector = null;
    
    public CureJFrame() {
        initComponents();
        db = new DBProcess();
        mainVector = new Vector();
        titleVector = new Vector();
        titleVector.add("编号");
	titleVector.add("病患姓名");
	titleVector.add("性别");
        titleVector.add("出生日期");
	titleVector.add("诊疗单号");
	titleVector.add("诊疗时间");
        titleVector.add("科室");
        titleVector.add("主治医生");
        titleVector.add("病患情况");
        
        jL_Hello.setText("欢迎您！"+HosLoginJDialog.DEPT_NAME_True+"："+HosLoginJDialog.PAS_USER_True);
        setLocationRelativeTo(null);
        //ImageIcon ico = new ImageIcon("D:/商场信息管理系统图片/xzy.jpg");
        //ImageIcon ico = new ImageIcon("F:/UsingItems/MyHospital/back.jpg");
        setB();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jTF_PAT_SEX = new javax.swing.JTextField();
        jTF_PAT_BIRTH = new javax.swing.JTextField();
        jL_QueryField = new javax.swing.JLabel();
        jCB_ChooseQuery = new javax.swing.JComboBox<>();
        jTF_QueryField = new javax.swing.JTextField();
        jB_QueryAll = new javax.swing.JButton();
        jB_Insert = new javax.swing.JButton();
        jTF_PAT_NO = new javax.swing.JTextField();
        jTF_PAT_NAME = new javax.swing.JTextField();
        jL_Insert = new javax.swing.JLabel();
        jL_PAT_NO = new javax.swing.JLabel();
        jL_PAT_NAME = new javax.swing.JLabel();
        jL_PAT_SEX = new javax.swing.JLabel();
        jL_BIRTH = new javax.swing.JLabel();
        jB_Query = new javax.swing.JButton();
        jL_Query = new javax.swing.JLabel();
        jL_Hello = new javax.swing.JLabel();
        jL_PC_NO = new javax.swing.JLabel();
        jL_DEPT_NAME = new javax.swing.JLabel();
        jL_PC_DATE = new javax.swing.JLabel();
        jTF_PC_DATE = new javax.swing.JTextField();
        jTF_DEPT_NO = new javax.swing.JTextField();
        jTF_PC_NO = new javax.swing.JTextField();
        jL_EMP_NO = new javax.swing.JLabel();
        jTF_EMP_NO = new javax.swing.JTextField();
        jL_PC_STATE = new javax.swing.JLabel();
        jTF_PC_STATE = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jB_Update = new javax.swing.JButton();
        jB_DelectPC = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu_Main = new javax.swing.JMenu();
        jMenu_Login = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable.setFont(new java.awt.Font("微软雅黑", 0, 18)); // NOI18N
        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "编号", "病患姓名", "性别", "出生日期", "诊疗单号", "诊疗时间", "科室", "主治医生", "病患情况"
            }
        ));
        jTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable);
        if (jTable.getColumnModel().getColumnCount() > 0) {
            jTable.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTable.getColumnModel().getColumn(2).setPreferredWidth(20);
            jTable.getColumnModel().getColumn(4).setPreferredWidth(100);
        }

        jTF_PAT_BIRTH.setForeground(new java.awt.Color(153, 153, 153));
        jTF_PAT_BIRTH.setText("如2000-01-01");

        jL_QueryField.setText("选择查询方式");

        jCB_ChooseQuery.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "编号", "病患姓名", "科室", "主治医生" }));
        jCB_ChooseQuery.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCB_ChooseQueryItemStateChanged(evt);
            }
        });

        jB_QueryAll.setText("查询全部挂号信息");
        jB_QueryAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_QueryAllActionPerformed(evt);
            }
        });

        jB_Insert.setText("添加挂号信息");
        jB_Insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_InsertActionPerformed(evt);
            }
        });

        jL_Insert.setFont(new java.awt.Font("微软雅黑", 0, 24)); // NOI18N
        jL_Insert.setText("挂号");

        jL_PAT_NO.setText("编号");

        jL_PAT_NAME.setText("病患姓名");

        jL_PAT_SEX.setText("性别");

        jL_BIRTH.setText("出生日期");

        jB_Query.setText("查询");
        jB_Query.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_QueryActionPerformed(evt);
            }
        });

        jL_Query.setFont(new java.awt.Font("微软雅黑", 0, 24)); // NOI18N
        jL_Query.setText("查询");

        jL_Hello.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jL_Hello.setText("欢迎您！");

        jL_PC_NO.setText("诊疗单号");

        jL_DEPT_NAME.setText("科室");

        jL_PC_DATE.setText("诊疗时间");

        jTF_PC_DATE.setForeground(new java.awt.Color(153, 153, 153));
        jTF_PC_DATE.setText("如2018-12-27");

        jL_EMP_NO.setText("主治医生");

        jL_PC_STATE.setText("病患情况");

        jLabel2.setText("输入查询内容");

        jB_Update.setText("修改挂号信息");
        jB_Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_UpdateActionPerformed(evt);
            }
        });

        jB_DelectPC.setText("删除本条挂号信息");
        jB_DelectPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_DelectPCActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("微软雅黑", 0, 30)); // NOI18N
        jLabel1.setText("门诊管理界面");

        jMenuBar1.setMinimumSize(new java.awt.Dimension(70, 35));
        jMenuBar1.setPreferredSize(new java.awt.Dimension(70, 35));

        jMenu1.setText("窗口切换");
        jMenu1.setFont(new java.awt.Font("微软雅黑", 0, 18)); // NOI18N

        jMenu_Main.setText("回到主菜单");
        jMenu_Main.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu_MainMouseClicked(evt);
            }
        });
        jMenu1.add(jMenu_Main);

        jMenu_Login.setText("切换登录");
        jMenu_Login.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu_LoginMouseClicked(evt);
            }
        });
        jMenu1.add(jMenu_Login);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jL_Hello, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(21, 21, 21)
                        .addComponent(jTF_QueryField, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jB_Query))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jL_QueryField, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jCB_ChooseQuery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jL_Query)
                        .addGap(18, 18, 18)
                        .addComponent(jB_QueryAll)))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jL_Insert, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jB_Insert)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jB_Update)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jB_DelectPC))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jL_BIRTH)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jL_PAT_NO)
                                    .addGap(36, 36, 36)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jL_DEPT_NAME)
                                .addGap(36, 36, 36)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTF_DEPT_NO, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jL_EMP_NO)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTF_EMP_NO, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jL_PC_STATE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTF_PAT_NO)
                                    .addComponent(jTF_PAT_BIRTH, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jL_PAT_NAME)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTF_PAT_NAME))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jL_PC_NO)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTF_PC_NO, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jL_PAT_SEX)
                                    .addComponent(jL_PC_DATE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTF_PC_DATE)
                            .addComponent(jTF_PAT_SEX)
                            .addComponent(jTF_PC_STATE, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 105, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jL_Hello))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jL_Query)
                            .addComponent(jB_QueryAll))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jL_QueryField)
                            .addComponent(jCB_ChooseQuery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTF_QueryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jB_Query)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jL_Insert, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jB_Insert)
                                .addComponent(jB_Update)
                                .addComponent(jB_DelectPC)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jL_PAT_NO)
                            .addComponent(jTF_PAT_NO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jL_PAT_NAME)
                            .addComponent(jTF_PAT_NAME, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jL_PAT_SEX)
                            .addComponent(jTF_PAT_SEX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTF_PC_NO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jL_PC_NO)
                            .addComponent(jL_PC_DATE)
                            .addComponent(jTF_PC_DATE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jL_BIRTH)
                            .addComponent(jTF_PAT_BIRTH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jL_DEPT_NAME)
                            .addComponent(jL_EMP_NO)
                            .addComponent(jTF_EMP_NO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jL_PC_STATE)
                            .addComponent(jTF_PC_STATE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTF_DEPT_NO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCB_ChooseQueryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCB_ChooseQueryItemStateChanged
        // TODO add your handling code here:
        switch (evt.getStateChange()) {  
                case ItemEvent.SELECTED:  
                	SelectQueryFieldStr = (String) evt.getItem();  
                    System.out.println("选中：" + SelectQueryFieldStr);  
                    break;  
                case ItemEvent.DESELECTED:  
                    System.out.println("取消选中：" + evt.getItem());  
                    break;  
                }
    }//GEN-LAST:event_jCB_ChooseQueryItemStateChanged

    private void jB_QueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_QueryActionPerformed
        // TODO add your handling code here:
        //设置sql语句
        String sqlWord = jTF_QueryField.getText().trim();
        String sql = null;
        sql = "USE MyHospital;" +
              "SELECT PATIENT.PAT_NO,PAT_NAME,PAT_SEX,PAT_BIRTH,PC_NO,PC_DATE,DEPT.DEPT_NAME,EMP_NAME,PC_STATE " +
              "FROM PATIENT,PATIENT_CURE,EMPLOYEE,DEPT " +
              "WHERE PATIENT.PAT_NO=PATIENT_CURE.PAT_NO AND PATIENT_CURE.EMP_NO=EMPLOYEE.EMP_NO AND PATIENT_CURE.DEPT_NO=DEPT.DEPT_NO ";
        /*sql = "USE MyHospital;" +
        "SELECT PATIENT.PAT_NO,PAT_NAME,PAT_SEX,PAT_BIRTH,DEPT.DEPT_NAME,EMP_NAME " +
        "FROM PATIENT,PATIENT_CURE,EMPLOYEE,DEPT " +
        "WHERE PATIENT.PAT_NO=PATIENT_CURE.PAT_NO AND PATIENT_CURE.EMP_NO=EMPLOYEE.EMP_NO AND PATIENT_CURE.DEPT_NO=DEPT.DEPT_NO ";*/
        if(SelectQueryFieldStr.equals("编号")){
            sql += "AND PATIENT.PAT_NO='" + sqlWord + "';"; 
        }
        else if(SelectQueryFieldStr.equals("科室")){
            sql += "AND DEPT_NAME='" + sqlWord + "';";
        }
        else if(SelectQueryFieldStr.equals("病患姓名")){
            sql += "AND PAT_NAME='" + sqlWord + "';";
        }
        else if(SelectQueryFieldStr.equals("主治医生")){
            sql += "AND EMP_NAME='" + sqlWord + "';";
        }
        
        //连接并获取数据
        db.connect();
        ResultSet rs = null;
        rs = db.executeQuery(sql);
       
        //将数据展示到表格上
        try {
            DefaultTableModel dtm = (DefaultTableModel)jTable.getModel();
           
           /*int rowNum = jTable.getRowCount();//获得行num
           System.out.println(rowNum);//////////////////////////////////////
                while(rowNum > 0)  //存在选中行
                {
                    System.out.println("ok");/////////////////////////////////
                    dtm.removeRow(rowNum);  //删除行
                    rowNum --;
                }*/
           
            mainVector.clear();
            while(rs.next()){
                Vector v = new Vector();
		v.add(rs.getString("PAT_NO"));
		v.add(rs.getString("PAT_NAME"));
                if(rs.getString("PAT_SEX").equals("1"))
                    v.add("女");
                else
                    v.add("男");
		v.add(rs.getString("PAT_BIRTH"));
                v.add(rs.getString("PC_NO"));
                v.add(rs.getString("PC_DATE"));
                v.add(rs.getString("DEPT_NAME"));
		v.add(rs.getString("EMP_NAME"));
		v.add(rs.getString("PC_STATE"));
                mainVector.add(v);
            }

            //dtm.addRow(mainVector);
            //jTable.updateUI();
            
            dtm.setDataVector(mainVector, titleVector);
            jTable.updateUI();
                
        } catch (SQLException ex) {
            System.out.println("SQLError.sql = " + sql);
            Logger.getLogger(CureJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //
        if (jTable.getColumnModel().getColumnCount() > 0) {
            jTable.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTable.getColumnModel().getColumn(2).setPreferredWidth(25);
            jTable.getColumnModel().getColumn(4).setPreferredWidth(100);
        }
        
        //将查询框内容置空
        jTF_QueryField.setText("");
    }//GEN-LAST:event_jB_QueryActionPerformed

    private void jB_QueryAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_QueryAllActionPerformed
        // TODO add your handling code here:
        queryAllProcess();
        /*
        //设置sql语句
        String sql = null;
        sql = "USE MyHospital;" +
              "SELECT PATIENT.PAT_NO,PAT_NAME,PAT_SEX,PAT_BIRTH,PC_NO,PC_DATE,DEPT.DEPT_NAME,EMP_NAME,PC_STATE " +
              "FROM PATIENT,PATIENT_CURE,EMPLOYEE,DEPT " +
              "WHERE PATIENT.PAT_NO=PATIENT_CURE.PAT_NO AND PATIENT_CURE.EMP_NO=EMPLOYEE.EMP_NO AND PATIENT_CURE.DEPT_NO=DEPT.DEPT_NO;";*/
        /*sql = "USE MyHospital;" +
        "SELECT PATIENT.PAT_NO,PAT_NAME,PAT_SEX,PAT_BIRTH,DEPT.DEPT_NAME,EMP_NAME " +
        "FROM PATIENT,PATIENT_CURE,EMPLOYEE,DEPT " +
        "WHERE PATIENT.PAT_NO=PATIENT_CURE.PAT_NO AND PATIENT_CURE.EMP_NO=EMPLOYEE.EMP_NO AND PATIENT_CURE.DEPT_NO=DEPT.DEPT_NO; ";*/
        
        /*
        //连接并获取数据
        db.connect();
        ResultSet rs = null;
        rs = db.executeQuery(sql);
        
        //将数据展示到表格上
        try {
            DefaultTableModel dtm = (DefaultTableModel)jTable.getModel();
            mainVector.clear();
            while(rs.next()){
                Vector v = new Vector();
                v.add(rs.getString("PAT_NO"));
		v.add(rs.getString("PAT_NAME"));
                if(rs.getString("PAT_SEX").equals("1"))
                    v.add("女");
                else
                    v.add("男");
		v.add(rs.getString("PAT_BIRTH"));
                v.add(rs.getString("PC_NO"));
                v.add(rs.getString("PC_DATE"));
                v.add(rs.getString("DEPT_NAME"));
		v.add(rs.getString("EMP_NAME"));
		v.add(rs.getString("PC_STATE"));
                mainVector.add(v);
            }

            dtm.setDataVector(mainVector, titleVector);
            jTable.updateUI();
                
        } catch (SQLException ex) {
            System.out.println("SQLError.sql = " + sql);
            Logger.getLogger(CureJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        */
    }//GEN-LAST:event_jB_QueryAllActionPerformed

    private void jB_InsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_InsertActionPerformed
        // TODO add your handling code here:
        String sql = null;
        String sPAT_NO = jTF_PAT_NO.getText().trim();
        String sPAT_NAME = jTF_PAT_NAME.getText().trim();
        String sPAT_SEX = jTF_PAT_SEX.getText().trim();
        String sPAT_BIRTH = jTF_PAT_BIRTH.getText().trim();
        String sPC_NO = jTF_PC_NO.getText().trim();
        String sPC_DATE = jTF_PC_DATE.getText().trim();
        String sDEPT_NO = jTF_DEPT_NO.getText().trim();
        String sEMP_NO = jTF_EMP_NO.getText().trim();
        String sPC_STATE = jTF_PC_STATE.getText().trim();
        
        if(sPAT_NO.isEmpty() || sPAT_NAME.isEmpty() || sPAT_SEX.isEmpty() 
            || sPAT_BIRTH.isEmpty() || sPC_NO.isEmpty() || sPC_DATE.isEmpty() 
            || sDEPT_NO.isEmpty() || sEMP_NO.isEmpty() || sPC_STATE.isEmpty() ){
                    JOptionPane.showMessageDialog(null,"数据不可为空","错误",JOptionPane.ERROR_MESSAGE);
        }
        else{
            //SQL处理（找外码对应的内容）
            if(sPAT_SEX.equals("男"))
                sPAT_SEX = "0";
            else
                sPAT_SEX = "1";
            String sql1,sql2;
            sql1 = "USE MyHospital; " +
                  "SELECT EMP_NO " +
                  "FROM EMPLOYEE " +
                  "WHERE EMP_NAME='" + sEMP_NO + "';";
            sql2 ="USE MyHospital; " +
                  "SELECT DEPT_NO " +
                  "FROM DEPT " +
                  "WHERE DEPT_NAME='" + sDEPT_NO + "';";
            db.connect();
            ResultSet rs1 = db.executeQuery(sql1);
            ResultSet rs2 = db.executeQuery(sql2);
            try {
                rs1.next();
                sEMP_NO = rs1.getString("EMP_NO");
                rs2.next();
                sDEPT_NO = rs2.getString("DEPT_NO");
                System.out.println(sEMP_NO + " " + sDEPT_NO);//////////////////////////////
            } catch (SQLException ex) {
                Logger.getLogger(CureJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            
            //SQL
            sql = "USE MyHospital; " +
                  "INSERT INTO PATIENT " +
                  "(PAT_NO,PAT_NAME,PAT_SEX,PAT_BIRTH) " +
                  //"VALUES('1705030266','张三',0,'2000-2-20'); " +
                  "VALUES('" + sPAT_NO + "','" + sPAT_NAME + "'," + sPAT_SEX + ",'" + sPAT_BIRTH + "'); "+
                  "INSERT INTO PATIENT_CURE " +
                  "(PC_NO,PAT_NO,EMP_NO,DEPT_NO,PC_STATE,PC_DATE) " +
                  //"VALUES('1812240001','1705030266','2014009001','009','患病','2018-12-24');" +
                  "VALUES('" + sPC_NO + "','" +sPAT_NO + "','" + sEMP_NO + "','" + sDEPT_NO + "','" + sPC_STATE + "','" + sPC_DATE + "');";
            System.out.println("insertProcess(). sql = " + sql);
            
            //连接并获取数据
            db.connect();
            //ResultSet rs = null;
            //rs = db.executeQuery(sql);
            
            //操作
            try{
			if (db.executeUpdate(sql) < 1) {
				System.out.println("insertProcess(). insert database failed.");
			}
		}catch(Exception e){
			System.out.println("e = " + e);
			JOptionPane.showMessageDialog(null,"数据操作错误","错误",JOptionPane.ERROR_MESSAGE);
		}
            
            //显示表格
            queryAllProcess();  
        }
    }//GEN-LAST:event_jB_InsertActionPerformed

    private void jB_UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_UpdateActionPerformed
        // TODO add your handling code here:
        String sql = null;
        String sPAT_NO = jTF_PAT_NO.getText().trim();
        String sPAT_NAME = jTF_PAT_NAME.getText().trim();
        String sPAT_SEX = jTF_PAT_SEX.getText().trim();
        String sPAT_BIRTH = jTF_PAT_BIRTH.getText().trim();
        String sPC_NO = jTF_PC_NO.getText().trim();
        String sPC_DATE = jTF_PC_DATE.getText().trim();
        String sDEPT_NO = jTF_DEPT_NO.getText().trim();
        String sEMP_NO = jTF_EMP_NO.getText().trim();
        String sPC_STATE = jTF_PC_STATE.getText().trim();
        
        if(sPAT_NO.isEmpty() || sPAT_NAME.isEmpty() || sPAT_SEX.isEmpty() 
            || sPAT_BIRTH.isEmpty() || sPC_NO.isEmpty() || sPC_DATE.isEmpty() 
            || sDEPT_NO.isEmpty() || sEMP_NO.isEmpty() || sPC_STATE.isEmpty() ){
                    JOptionPane.showMessageDialog(null,"数据不可为空","错误",JOptionPane.ERROR_MESSAGE);
        }
        else{
            //sql准备
            if(sPAT_SEX.equals("男"))
                sPAT_SEX = "0";
            else
                sPAT_SEX = "1";
            String sql1,sql2;
            sql1 = "USE MyHospital; " +
                  "SELECT EMP_NO " +
                  "FROM EMPLOYEE " +
                  "WHERE EMP_NAME='" + sEMP_NO + "';";
            sql2 ="USE MyHospital; " +
                  "SELECT DEPT_NO " +
                  "FROM DEPT " +
                  "WHERE DEPT_NAME='" + sDEPT_NO + "';";
            db.connect();
            ResultSet rs1 = db.executeQuery(sql1);
            ResultSet rs2 = db.executeQuery(sql2);
            try {
                rs1.next();
                sEMP_NO = rs1.getString("EMP_NO");
                rs2.next();
                sDEPT_NO = rs2.getString("DEPT_NO");
                System.out.println(sEMP_NO + " " + sDEPT_NO);//////////////////////////////
            } catch (SQLException ex) {
                Logger.getLogger(CureJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //sql编写
            /*sql = "USE MyHospital; " +
                  "update PATIENT_CURE " +
                  "set PC_NO = '1812250003', PAT_NO = '1705030266', EMP_NO = '2014009001', DEPT_NO = '009', PC_STATE = '复查',PC_DATE='2018-12-25' " +
                  "WHERE PC_NO = '1812250003'; " +
                  "update PATIENT " +
                  "set PAT_NO = '1705030266', PAT_NAME = '张三三', PAT_SEX = 0, PAT_BIRTH = '2000-02-20' " +
                  "WHERE PAT_NO = '1705030266';";*/
            sql = "USE MyHospital; " +
                  "update PATIENT_CURE " +
                  "set PC_NO = '" + sPC_NO + "', PAT_NO = '" + sPAT_NO + "', EMP_NO = '" + sEMP_NO + "', DEPT_NO = '" + sDEPT_NO + "', PC_STATE = '" + sPC_STATE +"',PC_DATE='" + sPC_DATE + "' " +
                  "WHERE PC_NO = '" + sPC_NO + "'; " +
                  "update PATIENT " +
                  "set PAT_NO = '" + sPAT_NO + "', PAT_NAME = '" + sPAT_NAME +"', PAT_SEX = " + sPAT_SEX +", PAT_BIRTH = '" + sPAT_BIRTH + "' " +
                  "WHERE PAT_NO = '" + sPAT_NO + "';";
            System.out.println("updateProcess.sql = "+sql);
            
            //执行
            try{
		if (db.executeUpdate(sql) < 1) {
			System.out.println("updateProcess(). update database failed.");
		}
	    }catch(Exception e){
		System.out.println("e = " + e);
		JOptionPane.showMessageDialog(null,"数据操作错误","错误",JOptionPane.ERROR_MESSAGE);
	    } 
            
            queryAllProcess();
        }
    }//GEN-LAST:event_jB_UpdateActionPerformed

    private void jTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMouseClicked
        // TODO add your handling code here:
        int row = ((JTable) evt.getSource()).rowAtPoint(evt.getPoint()); // 获得行位置
	System.out.println("mouseClicked(). row = " + row);
	Vector v = new Vector();
	v = (Vector) mainVector.get(row);///////////////////////////////////
        
	jTF_PAT_NO.setText((String) v.get(0));// 病人编号   这里的v.get(0)，实际上是 mainVector.get(row).get(0)
	jTF_PAT_NAME.setText((String) v.get(1));// 病人姓名
	jTF_PAT_SEX.setText((String) v.get(2));// 性别
	jTF_PAT_BIRTH.setText((String) v.get(3));// 出生日期
	jTF_PC_NO.setText((String) v.get(4));// 诊疗单号
	jTF_PC_DATE.setText((String) v.get(5));// 诊疗时间
        jTF_DEPT_NO.setText((String) v.get(6));// 病人所属科室号
        jTF_EMP_NO.setText((String) v.get(7));// 主治医生职工号
        jTF_PC_STATE.setText((String) v.get(8));// 病患情况
        
        jTF_PAT_BIRTH.setForeground(new java.awt.Color(0,0,0));
        jTF_PC_DATE.setForeground(new java.awt.Color(0,0,0));
    }//GEN-LAST:event_jTableMouseClicked

    private void jB_DelectPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_DelectPCActionPerformed
        // TODO add your handling code here:
        //本删除只会删除挂号表PATIENT_CURE的信息，病患信息PATIENT并没有删除。
        String sql = null;
        String sPC_NO = jTF_PC_NO.getText().trim();
        
        //sql
        sql = "USE MyHospital; DELETE FROM PATIENT_CURE WHERE PC_NO='" + sPC_NO + "';";
        System.out.println("delete_PC_Process(). sql = " + sql);

        //
        try{
	    if (db.executeUpdate(sql) < 1) {
		System.out.println("delete_PC_Process(). delete database failed.");
	    }}catch(Exception e){
			System.out.println("e = " + e);
			JOptionPane.showMessageDialog(null,"数据操作错误","错误",JOptionPane.ERROR_MESSAGE);
	}

        queryAllProcess();   
    }//GEN-LAST:event_jB_DelectPCActionPerformed

    private void jMenu_MainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu_MainMouseClicked
        // TODO add your handling code here:
        new HospitalJFrame().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jMenu_MainMouseClicked

    private void jMenu_LoginMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu_LoginMouseClicked
        // TODO add your handling code here:
        new HosLoginJDialog().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jMenu_LoginMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CureJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CureJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CureJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CureJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CureJFrame().setVisible(true);
            }
        });
    }
    
    private void queryAllProcess(){
        //设置sql语句
        String sql = null;
        sql = "USE MyHospital;" +
              "SELECT PATIENT.PAT_NO,PAT_NAME,PAT_SEX,PAT_BIRTH,PC_NO,PC_DATE,DEPT.DEPT_NAME,EMP_NAME,PC_STATE " +
              "FROM PATIENT,PATIENT_CURE,EMPLOYEE,DEPT " +
              "WHERE PATIENT.PAT_NO=PATIENT_CURE.PAT_NO AND PATIENT_CURE.EMP_NO=EMPLOYEE.EMP_NO AND PATIENT_CURE.DEPT_NO=DEPT.DEPT_NO;";
        /*sql = "USE MyHospital;" +
        "SELECT PATIENT.PAT_NO,PAT_NAME,PAT_SEX,PAT_BIRTH,DEPT.DEPT_NAME,EMP_NAME " +
        "FROM PATIENT,PATIENT_CURE,EMPLOYEE,DEPT " +
        "WHERE PATIENT.PAT_NO=PATIENT_CURE.PAT_NO AND PATIENT_CURE.EMP_NO=EMPLOYEE.EMP_NO AND PATIENT_CURE.DEPT_NO=DEPT.DEPT_NO; ";*/
        
        //连接并获取数据
        db.connect();
        ResultSet rs = null;
        rs = db.executeQuery(sql);
        
        //将数据展示到表格上
        try {
            DefaultTableModel dtm = (DefaultTableModel)jTable.getModel();
            mainVector.clear();
            while(rs.next()){
                Vector v = new Vector();
                v.add(rs.getString("PAT_NO"));
		v.add(rs.getString("PAT_NAME"));
                if(rs.getString("PAT_SEX").equals("1"))
                    v.add("女");
                else
                    v.add("男");
		v.add(rs.getString("PAT_BIRTH"));
                v.add(rs.getString("PC_NO"));
                v.add(rs.getString("PC_DATE"));
                v.add(rs.getString("DEPT_NAME"));
		v.add(rs.getString("EMP_NAME"));
		v.add(rs.getString("PC_STATE"));
                mainVector.add(v);
            }

            dtm.setDataVector(mainVector, titleVector);
            jTable.updateUI();
        } catch (SQLException ex) {
            System.out.println("SQLError.sql = " + sql);
            Logger.getLogger(CureJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //
        if (jTable.getColumnModel().getColumnCount() > 0) {
            jTable.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTable.getColumnModel().getColumn(2).setPreferredWidth(25);
            jTable.getColumnModel().getColumn(4).setPreferredWidth(100);
        }
    
    }
    
    
    private void setB(){
         ImageIcon img = new ImageIcon("F:/UsingItems/MyHospital/back.jpg");//这是背景图片////////////////////////////////
         JLabel imgLabel = new JLabel(img);//将背景图放在标签里。
           this.getLayeredPane().add(imgLabel, new Integer(Integer.MIN_VALUE));//注意这里是关键，将背景标签添加到jfram的LayeredPane面板里。
           imgLabel.setBounds(0,0,img.getIconWidth(), img.getIconHeight());//设置背景标签的位置
           Container cp=this.getContentPane();
           cp.setLayout(new BorderLayout());
           ((JPanel)cp).setOpaque(false); //注意这里，将内容面板设为透明。这样LayeredPane面板中的背景才能显示出来。
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB_DelectPC;
    private javax.swing.JButton jB_Insert;
    private javax.swing.JButton jB_Query;
    private javax.swing.JButton jB_QueryAll;
    private javax.swing.JButton jB_Update;
    private javax.swing.JComboBox<String> jCB_ChooseQuery;
    private javax.swing.JLabel jL_BIRTH;
    private javax.swing.JLabel jL_DEPT_NAME;
    private javax.swing.JLabel jL_EMP_NO;
    private javax.swing.JLabel jL_Hello;
    private javax.swing.JLabel jL_Insert;
    private javax.swing.JLabel jL_PAT_NAME;
    private javax.swing.JLabel jL_PAT_NO;
    private javax.swing.JLabel jL_PAT_SEX;
    private javax.swing.JLabel jL_PC_DATE;
    private javax.swing.JLabel jL_PC_NO;
    private javax.swing.JLabel jL_PC_STATE;
    private javax.swing.JLabel jL_Query;
    private javax.swing.JLabel jL_QueryField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenu_Login;
    private javax.swing.JMenu jMenu_Main;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTF_DEPT_NO;
    private javax.swing.JTextField jTF_EMP_NO;
    private javax.swing.JTextField jTF_PAT_BIRTH;
    private javax.swing.JTextField jTF_PAT_NAME;
    private javax.swing.JTextField jTF_PAT_NO;
    private javax.swing.JTextField jTF_PAT_SEX;
    private javax.swing.JTextField jTF_PC_DATE;
    private javax.swing.JTextField jTF_PC_NO;
    private javax.swing.JTextField jTF_PC_STATE;
    private javax.swing.JTextField jTF_QueryField;
    private javax.swing.JTable jTable;
    // End of variables declaration//GEN-END:variables
}
